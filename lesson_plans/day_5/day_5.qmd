---
title: "Day 5"
author: "RichÃ¨l Bilderbeek"
format: revealjs
bibliography: day_5.bib
from: markdown+emoji
csl: vancouver.csl
jupyter: python3
css: styles.css
slide-number: true
number-sections: true
---

# Big Picture

## Breaks

Please take breaks:
these are important for learning.
Ideally, do something boring @newport2016deep!

## Break schedule

 * 10:00-10:15
 * 11:00-11:15
 * 12:00-13:00
 * 14:00-14:15
 * 15:00-15:15
 * 16:00-16:15

## Problem

Imagine you have to write code to extract DNA sequences
from a file.
To do so, you need a function to detect if a string is a
DNA sequence.

How would you do that?

## Things we must agree on

```{python}
#| eval: false
#| echo: true
# Test strings that are correct
# "A"
# "ACGT"
# Test strings that are incorrect
# ""
# "acgt"
# "nonsense"
```

## Pseudocode of the answer

```{python}
#| eval: false
#| echo: true

# Define my function: is_dna_sequence
#  (assume input is a string)
#  if string is empty, return False
#  count the length of the string
#  count the number of As, Cs, Gs, Ts
#  if the ACGT counts add up 
#  to the total length:
#    return True
#  else return False
```

## Can we do better?

Yes, we can! 

We use regular expressions!

## Wikipedia definition

> A regular expression (shortened as regex or regexp)
> is a sequence of characters that specifies a match pattern in text.
>
> Adapted from [Wikipedia](https://en.wikipedia.org/wiki/Regular_expression)

## Importing the `re` module

To use regexes in Python, 
put this line at the top of your script:

```{python}
#| eval: true
#| echo: true
import re
```

## Creating the pattern

A DNA sequence contains only 'A', 'C', 'G' and 'T's
and has at least 1 one of these characters.

This would be the pattern:

```{python}
#| eval: false
#| echo: true
"[ACGT]+"
```

 * `[ACGT]`: must be among these characters
 * `+` ... at least once

## Compiling the pattern

```{python}
#| eval: true
#| echo: true
dna_seq_pattern = re.compile("[ACGT]+")
print(dna_seq_pattern)
```

 * :sunglasses: This results in a finite state machine 
   with all `if` statement needed 

## Getting a match

```{python}
#| eval: true
#| echo: true
print(dna_seq_pattern.match("A"))
```

```{python}
#| eval: true
#| echo: true
print(dna_seq_pattern.match("AACGCGT"))
```

```{python}
#| eval: true
#| echo: true
print(dna_seq_pattern.match("nonsense"))
```

## Getting a match

```{python}
#| eval: true
#| echo: true
m = dna_seq_pattern.match("ACGT")
if m:
  print("This was a match!")
else:
  print("Nope, no DNA here :-(")
```

## Getting no match

```{python}
#| eval: true
#| echo: true
m = dna_seq_pattern.match("nonsense")
if m:
  print("This was a match!")
else:
  print("Nope, no DNA here :-(")
```

## Q: What is a regular expression?

What is a regular expression?

```{python}
#| eval: false
#| echo: true
2023-04-13
107 70 Stockholm
+46 8 405 10 00
2,112,000 kr
```

:woman_technologist: Write down in the HackMD! :man_technologist:

## Q: What are other text patterns?

Do you know example of other text patterns?

 * Name those text patterns, e.g. 'A DNA sequence'
 * Do not describe the text pattern!

:woman_technologist: Write down in the HackMD! :man_technologist:

## A: What are other text patterns?

 * A first/last/full name
 * An address
 * A ZIP/postcal code
 * A phone number
 * A Swedish ID/'personnummer'
 * A URL
 * ... etcetera






## A pattern

```{python}
#| eval: true
#| echo: true
pattern = re.compile(".{2}")
print(pattern)
```

## Matching

```{python}
#| eval: true
#| echo: true
match = pattern.search("Hello")
print(match)
```

 * [The 're' documentation](https://docs.python.org/3/library/re.html)

How to do better?

:woman_technologist: Write down in the HackMD! :man_technologist:

## Naive answer

```{python}
#| eval: true
#| echo: true
numerator = 1.2
denominator = 3.4
# denominator is not zero
if denominator == 0.0:
    print("ERROR! QUIT!")
```

What do we express here?

## `assert`

Express: 'I believe this to be true':

```{python}
#| echo: true
#| eval: true
assert 1 + 1 == 2
```

This presentation will not compile when an `assert` fails!

## `assert` in action

```{python}
#| echo: true
#| eval: true
numerator = 1.2
denominator = 3.4
assert denominator != 0.0
value = numerator / denominator
```

Use assert extensively @sutter2004cpp@stroustrup2013cpp@mcconnell2004code
@liberty2002sams@lakos1996large.


## Questions about today's theory?

:woman_technologist: Write down in the HackMD! :man_technologist:

If not, apply this in The Project:

 * Use `assert`
 * Split code into functions
 * Test functions

# Done!

Go home and rest :-)

# Breaks

Are important. Please rest!

## Break 1: 10:00-10:15



## Break 2: 11:00-11:15



## Break 3: 12:00-13:00



## Break 4: 14:00-14:15



## Break 5: 15:00-15:15



## Break 6: 16:00-16:15



## Done



## References
